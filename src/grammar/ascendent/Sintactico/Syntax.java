
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Mar 17 21:20:13 CST 2020
//----------------------------------------------------

package grammar.ascendent.Sintactico;

import java_cup.runtime.*;
import java.util.LinkedList;
import ast.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Mar 17 21:20:13 CST 2020
  */
public class Syntax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Syntax() {super();}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\137\000\002\002\004\000\002\002\003\000\002\003" +
    "\005\000\002\003\004\000\002\044\003\000\002\044\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\004\000\002\004\003\000\002\004\003\000\002\022" +
    "\004\000\002\023\004\000\002\023\004\000\002\006\004" +
    "\000\002\006\006\000\002\006\011\000\002\006\011\000" +
    "\002\024\006\000\002\024\002\000\002\025\005\000\002" +
    "\025\003\000\002\034\003\000\002\034\002\000\002\035" +
    "\005\000\002\035\003\000\002\036\004\000\002\037\004" +
    "\000\002\037\002\000\002\026\004\000\002\026\006\000" +
    "\002\026\005\000\002\027\004\000\002\027\004\000\002" +
    "\030\004\000\002\030\003\000\002\031\003\000\002\031" +
    "\002\000\002\032\004\000\002\032\003\000\002\033\005" +
    "\000\002\033\005\000\002\007\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\004\000\002\005\004\000\002\005\004\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\040\005" +
    "\000\002\040\004\000\002\040\002\000\002\041\003\000" +
    "\002\041\002\000\002\042\005\000\002\042\003\000\002" +
    "\043\003\000\002\043\003\000\002\010\011\000\002\010" +
    "\012\000\002\010\013\000\002\010\012\000\002\011\004" +
    "\000\002\011\003\000\002\013\012\000\002\012\006\000" +
    "\002\017\010\000\002\020\006\000\002\021\005\000\002" +
    "\014\011\000\002\015\012\000\002\016\013\000\002\045" +
    "\003\000\002\045\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\311\000\024\007\014\012\013\014\005\017\007\020" +
    "\015\021\006\024\020\025\012\026\004\001\002\000\030" +
    "\004\044\005\042\006\051\007\046\010\040\011\043\022" +
    "\041\040\047\042\050\063\uffa3\065\uffa3\001\002\000\004" +
    "\034\276\001\002\000\004\034\266\001\002\000\004\034" +
    "\260\001\002\000\006\063\ufff8\065\ufff8\001\002\000\026" +
    "\002\000\007\014\012\013\014\005\017\007\020\015\021" +
    "\006\024\020\025\012\026\004\001\002\000\006\063\ufff3" +
    "\065\ufff3\001\002\000\004\034\232\001\002\000\006\032" +
    "\161\060\160\001\002\000\004\036\032\001\002\000\006" +
    "\063\ufffb\065\ufffb\001\002\000\006\063\ufffa\065\ufffa\001" +
    "\002\000\006\063\ufff4\065\ufff4\001\002\000\006\063\ufff7" +
    "\065\ufff7\001\002\000\004\002\031\001\002\000\006\063" +
    "\ufff6\065\ufff6\001\002\000\006\063\ufff9\065\ufff9\001\002" +
    "\000\006\063\030\065\026\001\002\000\036\002\ufffc\007" +
    "\ufffc\012\ufffc\014\ufffc\016\ufffc\017\ufffc\020\ufffc\021\ufffc" +
    "\024\ufffc\025\ufffc\026\ufffc\037\ufffc\063\ufffc\065\ufffc\001" +
    "\002\000\036\002\ufffe\007\ufffe\012\ufffe\014\ufffe\016\ufffe" +
    "\017\ufffe\020\ufffe\021\ufffe\024\ufffe\025\ufffe\026\ufffe\037" +
    "\ufffe\063\ufffe\065\ufffe\001\002\000\036\002\ufffd\007\ufffd" +
    "\012\ufffd\014\ufffd\016\ufffd\017\ufffd\020\ufffd\021\ufffd\024" +
    "\ufffd\025\ufffd\026\ufffd\037\ufffd\063\ufffd\065\ufffd\001\002" +
    "\000\004\002\001\001\002\000\024\007\014\012\013\014" +
    "\005\017\007\020\015\021\006\024\020\025\012\026\004" +
    "\001\002\000\026\007\014\012\013\014\005\017\007\020" +
    "\015\021\006\024\020\025\012\026\004\037\035\001\002" +
    "\000\006\063\030\065\026\001\002\000\004\017\036\001" +
    "\002\000\004\036\037\001\002\000\024\004\044\005\042" +
    "\006\051\007\046\010\040\011\043\022\041\040\047\042" +
    "\050\001\002\000\062\031\uffbe\033\uffbe\035\uffbe\037\uffbe" +
    "\041\uffbe\042\uffbe\044\uffbe\045\uffbe\046\uffbe\047\uffbe\050" +
    "\uffbe\051\uffbe\052\uffbe\053\uffbe\054\uffbe\055\uffbe\056\uffbe" +
    "\057\uffbe\060\uffbe\061\uffbe\062\uffbe\063\uffbe\064\uffbe\065" +
    "\uffbe\001\002\000\062\031\uffbc\033\uffbc\035\uffbc\037\uffbc" +
    "\041\uffbc\042\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc\050" +
    "\uffbc\051\uffbc\052\uffbc\053\uffbc\054\uffbc\055\uffbc\056\uffbc" +
    "\057\uffbc\060\uffbc\061\uffbc\062\uffbc\063\uffbc\064\uffbc\065" +
    "\uffbc\001\002\000\062\031\uffc1\033\uffc1\035\uffc1\037\uffc1" +
    "\041\uffc1\042\uffc1\044\uffc1\045\uffc1\046\uffc1\047\uffc1\050" +
    "\uffc1\051\uffc1\052\uffc1\053\uffc1\054\uffc1\055\uffc1\056\uffc1" +
    "\057\uffc1\060\uffc1\061\uffc1\062\uffc1\063\uffc1\064\uffc1\065" +
    "\uffc1\001\002\000\062\031\uffbd\033\uffbd\035\uffbd\037\uffbd" +
    "\041\uffbd\042\uffbd\044\uffbd\045\uffbd\046\uffbd\047\uffbd\050" +
    "\uffbd\051\uffbd\052\uffbd\053\uffbd\054\uffbd\055\uffbd\056\uffbd" +
    "\057\uffbd\060\uffbd\061\uffbd\062\uffbd\063\uffbd\064\uffbd\065" +
    "\uffbd\001\002\000\062\031\uffc0\033\uffc0\035\uffc0\037\uffc0" +
    "\041\uffc0\042\uffc0\044\uffc0\045\uffc0\046\uffc0\047\uffc0\050" +
    "\uffc0\051\uffc0\052\uffc0\053\uffc0\054\uffc0\055\uffc0\056\uffc0" +
    "\057\uffc0\060\uffc0\061\uffc0\062\uffc0\063\uffc0\064\uffc0\065" +
    "\uffc0\001\002\000\040\037\155\041\056\042\064\044\060" +
    "\045\066\046\055\047\053\050\061\051\063\052\062\053" +
    "\057\054\054\055\065\056\070\057\067\001\002\000\066" +
    "\031\uffb9\032\112\033\uffb9\034\110\035\uffb9\037\uffb9\041" +
    "\uffb9\042\uffb9\044\uffb9\045\uffb9\046\uffb9\047\uffb9\050\uffb9" +
    "\051\uffb9\052\uffb9\053\uffb9\054\uffb9\055\uffb9\056\uffb9\057" +
    "\uffb9\060\uffb9\061\uffb9\062\uffb9\063\uffb9\064\uffb9\065\uffb9" +
    "\001\002\000\024\004\044\005\042\006\051\007\046\010" +
    "\040\011\043\022\041\040\047\042\050\001\002\000\024" +
    "\004\044\005\042\006\051\007\046\010\040\011\043\022" +
    "\041\040\047\042\050\001\002\000\062\031\uffbf\033\uffbf" +
    "\035\uffbf\037\uffbf\041\uffbf\042\uffbf\044\uffbf\045\uffbf\046" +
    "\uffbf\047\uffbf\050\uffbf\051\uffbf\052\uffbf\053\uffbf\054\uffbf" +
    "\055\uffbf\056\uffbf\057\uffbf\060\uffbf\061\uffbf\062\uffbf\063" +
    "\uffbf\064\uffbf\065\uffbf\001\002\000\062\031\uffc3\033\uffc3" +
    "\035\uffc3\037\uffc3\041\uffc3\042\uffc3\044\uffc3\045\uffc3\046" +
    "\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3\053\uffc3\054\uffc3" +
    "\055\uffc3\056\uffc3\057\uffc3\060\uffc3\061\uffc3\062\uffc3\063" +
    "\uffc3\064\uffc3\065\uffc3\001\002\000\024\004\044\005\042" +
    "\006\051\007\046\010\040\011\043\022\041\040\047\042" +
    "\050\001\002\000\024\004\044\005\042\006\051\007\046" +
    "\010\040\011\043\022\041\040\047\042\050\001\002\000" +
    "\024\004\044\005\042\006\051\007\046\010\040\011\043" +
    "\022\041\040\047\042\050\001\002\000\024\004\044\005" +
    "\042\006\051\007\046\010\040\011\043\022\041\040\047" +
    "\042\050\001\002\000\024\004\044\005\042\006\051\007" +
    "\046\010\040\011\043\022\041\040\047\042\050\001\002" +
    "\000\024\004\044\005\042\006\051\007\046\010\040\011" +
    "\043\022\041\040\047\042\050\001\002\000\024\004\044" +
    "\005\042\006\051\007\046\010\040\011\043\022\041\040" +
    "\047\042\050\001\002\000\024\004\044\005\042\006\051" +
    "\007\046\010\040\011\043\022\041\040\047\042\050\001" +
    "\002\000\024\004\044\005\042\006\051\007\046\010\040" +
    "\011\043\022\041\040\047\042\050\001\002\000\024\004" +
    "\044\005\042\006\051\007\046\010\040\011\043\022\041" +
    "\040\047\042\050\001\002\000\024\004\044\005\042\006" +
    "\051\007\046\010\040\011\043\022\041\040\047\042\050" +
    "\001\002\000\024\004\044\005\042\006\051\007\046\010" +
    "\040\011\043\022\041\040\047\042\050\001\002\000\024" +
    "\004\044\005\042\006\051\007\046\010\040\011\043\022" +
    "\041\040\047\042\050\001\002\000\024\004\044\005\042" +
    "\006\051\007\046\010\040\011\043\022\041\040\047\042" +
    "\050\001\002\000\062\031\uffc5\033\uffc5\035\uffc5\037\uffc5" +
    "\041\056\042\064\044\060\045\066\046\055\047\053\050" +
    "\061\051\063\052\062\053\057\054\054\055\065\056\uffc5" +
    "\057\uffc5\060\uffc5\061\uffc5\062\uffc5\063\uffc5\064\uffc5\065" +
    "\uffc5\001\002\000\062\031\uffc6\033\uffc6\035\uffc6\037\uffc6" +
    "\041\056\042\064\044\060\045\066\046\055\047\053\050" +
    "\061\051\063\052\062\053\057\054\054\055\065\056\070" +
    "\057\uffc6\060\uffc6\061\uffc6\062\uffc6\063\uffc6\064\uffc6\065" +
    "\uffc6\001\002\000\062\031\uffcf\033\uffcf\035\uffcf\037\uffcf" +
    "\041\uffcf\042\uffcf\044\uffcf\045\uffcf\046\uffcf\047\uffcf\050" +
    "\uffcf\051\uffcf\052\uffcf\053\uffcf\054\uffcf\055\uffcf\056\uffcf" +
    "\057\uffcf\060\uffcf\061\uffcf\062\uffcf\063\uffcf\064\uffcf\065" +
    "\uffcf\001\002\000\062\031\uffc7\033\uffc7\035\uffc7\037\uffc7" +
    "\041\056\042\064\044\060\045\066\046\055\047\053\050" +
    "\uffc7\051\uffc7\052\uffc7\053\uffc7\054\uffc7\055\uffc7\056\uffc7" +
    "\057\uffc7\060\uffc7\061\uffc7\062\uffc7\063\uffc7\064\uffc7\065" +
    "\uffc7\001\002\000\062\031\uffd1\033\uffd1\035\uffd1\037\uffd1" +
    "\041\uffd1\042\uffd1\044\060\045\066\046\055\047\053\050" +
    "\uffd1\051\uffd1\052\uffd1\053\uffd1\054\uffd1\055\uffd1\056\uffd1" +
    "\057\uffd1\060\uffd1\061\uffd1\062\uffd1\063\uffd1\064\uffd1\065" +
    "\uffd1\001\002\000\062\031\uffca\033\uffca\035\uffca\037\uffca" +
    "\041\056\042\064\044\060\045\066\046\055\047\053\050" +
    "\uffca\051\uffca\052\uffca\053\uffca\054\uffca\055\uffca\056\uffca" +
    "\057\uffca\060\uffca\061\uffca\062\uffca\063\uffca\064\uffca\065" +
    "\uffca\001\002\000\062\031\uffcb\033\uffcb\035\uffcb\037\uffcb" +
    "\041\056\042\064\044\060\045\066\046\055\047\053\050" +
    "\uffcb\051\uffcb\052\uffcb\053\uffcb\054\uffcb\055\uffcb\056\uffcb" +
    "\057\uffcb\060\uffcb\061\uffcb\062\uffcb\063\uffcb\064\uffcb\065" +
    "\uffcb\001\002\000\062\031\uffcc\033\uffcc\035\uffcc\037\uffcc" +
    "\041\056\042\064\044\060\045\066\046\055\047\053\050" +
    "\uffcc\051\uffcc\052\uffcc\053\uffcc\054\uffcc\055\uffcc\056\uffcc" +
    "\057\uffcc\060\uffcc\061\uffcc\062\uffcc\063\uffcc\064\uffcc\065" +
    "\uffcc\001\002\000\062\031\uffd0\033\uffd0\035\uffd0\037\uffd0" +
    "\041\uffd0\042\uffd0\044\uffd0\045\uffd0\046\uffd0\047\uffd0\050" +
    "\uffd0\051\uffd0\052\uffd0\053\uffd0\054\uffd0\055\uffd0\056\uffd0" +
    "\057\uffd0\060\uffd0\061\uffd0\062\uffd0\063\uffd0\064\uffd0\065" +
    "\uffd0\001\002\000\062\031\uffc9\033\uffc9\035\uffc9\037\uffc9" +
    "\041\056\042\064\044\060\045\066\046\055\047\053\050" +
    "\uffc9\051\uffc9\052\uffc9\053\uffc9\054\uffc9\055\uffc9\056\uffc9" +
    "\057\uffc9\060\uffc9\061\uffc9\062\uffc9\063\uffc9\064\uffc9\065" +
    "\uffc9\001\002\000\062\031\uffd2\033\uffd2\035\uffd2\037\uffd2" +
    "\041\uffd2\042\uffd2\044\060\045\066\046\055\047\053\050" +
    "\uffd2\051\uffd2\052\uffd2\053\uffd2\054\uffd2\055\uffd2\056\uffd2" +
    "\057\uffd2\060\uffd2\061\uffd2\062\uffd2\063\uffd2\064\uffd2\065" +
    "\uffd2\001\002\000\062\031\uffce\033\uffce\035\uffce\037\uffce" +
    "\041\uffce\042\uffce\044\uffce\045\uffce\046\uffce\047\uffce\050" +
    "\uffce\051\uffce\052\uffce\053\uffce\054\uffce\055\uffce\056\uffce" +
    "\057\uffce\060\uffce\061\uffce\062\uffce\063\uffce\064\uffce\065" +
    "\uffce\001\002\000\062\031\uffc8\033\uffc8\035\uffc8\037\uffc8" +
    "\041\056\042\064\044\060\045\066\046\055\047\053\050" +
    "\uffc8\051\uffc8\052\uffc8\053\uffc8\054\uffc8\055\uffc8\056\uffc8" +
    "\057\uffc8\060\uffc8\061\uffc8\062\uffc8\063\uffc8\064\uffc8\065" +
    "\uffc8\001\002\000\062\031\uffcd\033\uffcd\035\uffcd\037\uffcd" +
    "\041\uffcd\042\uffcd\044\uffcd\045\uffcd\046\uffcd\047\uffcd\050" +
    "\uffcd\051\uffcd\052\uffcd\053\uffcd\054\uffcd\055\uffcd\056\uffcd" +
    "\057\uffcd\060\uffcd\061\uffcd\062\uffcd\063\uffcd\064\uffcd\065" +
    "\uffcd\001\002\000\062\031\uffc4\033\uffc4\035\uffc4\037\uffc4" +
    "\041\056\042\064\044\060\045\066\046\055\047\053\050" +
    "\061\051\063\052\062\053\057\054\054\055\065\056\uffc4" +
    "\057\uffc4\060\uffc4\061\uffc4\062\uffc4\063\uffc4\064\uffc4\065" +
    "\uffc4\001\002\000\030\004\044\005\042\006\051\007\046" +
    "\010\040\011\043\016\147\022\041\035\uffb7\040\047\042" +
    "\050\001\002\000\062\031\uffc2\033\uffc2\035\uffc2\037\uffc2" +
    "\041\uffc2\042\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2\050" +
    "\uffc2\051\uffc2\052\uffc2\053\uffc2\054\uffc2\055\uffc2\056\uffc2" +
    "\057\uffc2\060\uffc2\061\uffc2\062\uffc2\063\uffc2\064\uffc2\065" +
    "\uffc2\001\002\000\030\004\044\005\042\006\051\007\046" +
    "\010\040\011\043\022\041\032\115\040\047\042\050\064" +
    "\113\001\002\000\024\004\044\005\042\006\051\007\046" +
    "\010\040\011\043\022\041\040\047\042\050\001\002\000" +
    "\062\031\uffba\033\uffba\035\uffba\037\uffba\041\uffba\042\uffba" +
    "\044\uffba\045\uffba\046\uffba\047\uffba\050\uffba\051\uffba\052" +
    "\uffba\053\uffba\054\uffba\055\uffba\056\uffba\057\uffba\060\uffba" +
    "\061\uffba\062\uffba\063\uffba\064\uffba\065\uffba\001\002\000" +
    "\024\004\044\005\042\006\051\007\046\010\040\011\043" +
    "\022\041\040\047\042\050\001\002\000\042\033\120\041" +
    "\056\042\064\044\060\045\066\046\055\047\053\050\061" +
    "\051\063\052\062\053\057\054\054\055\065\056\070\057" +
    "\067\064\117\001\002\000\026\004\044\005\042\006\051" +
    "\007\046\010\040\011\043\022\041\033\136\040\047\042" +
    "\050\001\002\000\066\030\123\031\uffd8\032\126\033\uffd8" +
    "\035\uffd8\037\uffd8\041\uffd8\042\uffd8\044\uffd8\045\uffd8\046" +
    "\uffd8\047\uffd8\050\uffd8\051\uffd8\052\uffd8\053\uffd8\054\uffd8" +
    "\055\uffd8\056\uffd8\057\uffd8\060\uffd8\061\uffd8\062\uffd8\063" +
    "\uffd8\064\uffd8\065\uffd8\001\002\000\062\031\uffe0\033\uffe0" +
    "\035\uffe0\037\uffe0\041\uffe0\042\uffe0\044\uffe0\045\uffe0\046" +
    "\uffe0\047\uffe0\050\uffe0\051\uffe0\052\uffe0\053\uffe0\054\uffe0" +
    "\055\uffe0\056\uffe0\057\uffe0\060\uffe0\061\uffe0\062\uffe0\063" +
    "\uffe0\064\uffe0\065\uffe0\001\002\000\066\030\uffd6\031\uffd6" +
    "\032\uffd6\033\uffd6\035\uffd6\037\uffd6\041\uffd6\042\uffd6\044" +
    "\uffd6\045\uffd6\046\uffd6\047\uffd6\050\uffd6\051\uffd6\052\uffd6" +
    "\053\uffd6\054\uffd6\055\uffd6\056\uffd6\057\uffd6\060\uffd6\061" +
    "\uffd6\062\uffd6\063\uffd6\064\uffd6\065\uffd6\001\002\000\024" +
    "\004\044\005\042\006\051\007\046\010\040\011\043\022" +
    "\041\040\047\042\050\001\002\000\062\031\uffdd\033\uffdd" +
    "\035\uffdd\037\uffdd\041\uffdd\042\uffdd\044\uffdd\045\uffdd\046" +
    "\uffdd\047\uffdd\050\uffdd\051\uffdd\052\uffdd\053\uffdd\054\uffdd" +
    "\055\uffdd\056\uffdd\057\uffdd\060\uffdd\061\uffdd\062\uffdd\063" +
    "\uffdd\064\uffdd\065\uffdd\001\002\000\066\030\123\031\uffd9" +
    "\032\126\033\uffd9\035\uffd9\037\uffd9\041\uffd9\042\uffd9\044" +
    "\uffd9\045\uffd9\046\uffd9\047\uffd9\050\uffd9\051\uffd9\052\uffd9" +
    "\053\uffd9\054\uffd9\055\uffd9\056\uffd9\057\uffd9\060\uffd9\061" +
    "\uffd9\062\uffd9\063\uffd9\064\uffd9\065\uffd9\001\002\000\024" +
    "\004\044\005\042\006\051\007\046\010\040\011\043\022" +
    "\041\040\047\042\050\001\002\000\040\033\130\041\056" +
    "\042\064\044\060\045\066\046\055\047\053\050\061\051" +
    "\063\052\062\053\057\054\054\055\065\056\070\057\067" +
    "\001\002\000\066\030\uffd5\031\uffd5\032\uffd5\033\uffd5\035" +
    "\uffd5\037\uffd5\041\uffd5\042\uffd5\044\uffd5\045\uffd5\046\uffd5" +
    "\047\uffd5\050\uffd5\051\uffd5\052\uffd5\053\uffd5\054\uffd5\055" +
    "\uffd5\056\uffd5\057\uffd5\060\uffd5\061\uffd5\062\uffd5\063\uffd5" +
    "\064\uffd5\065\uffd5\001\002\000\066\030\uffd7\031\uffd7\032" +
    "\uffd7\033\uffd7\035\uffd7\037\uffd7\041\uffd7\042\uffd7\044\uffd7" +
    "\045\uffd7\046\uffd7\047\uffd7\050\uffd7\051\uffd7\052\uffd7\053" +
    "\uffd7\054\uffd7\055\uffd7\056\uffd7\057\uffd7\060\uffd7\061\uffd7" +
    "\062\uffd7\063\uffd7\064\uffd7\065\uffd7\001\002\000\040\031" +
    "\133\041\056\042\064\044\060\045\066\046\055\047\053" +
    "\050\061\051\063\052\062\053\057\054\054\055\065\056" +
    "\070\057\067\001\002\000\066\030\uffd4\031\uffd4\032\uffd4" +
    "\033\uffd4\035\uffd4\037\uffd4\041\uffd4\042\uffd4\044\uffd4\045" +
    "\uffd4\046\uffd4\047\uffd4\050\uffd4\051\uffd4\052\uffd4\053\uffd4" +
    "\054\uffd4\055\uffd4\056\uffd4\057\uffd4\060\uffd4\061\uffd4\062" +
    "\uffd4\063\uffd4\064\uffd4\065\uffd4\001\002\000\062\031\uffdc" +
    "\033\uffdc\035\uffdc\037\uffdc\041\uffdc\042\uffdc\044\uffdc\045" +
    "\uffdc\046\uffdc\047\uffdc\050\uffdc\051\uffdc\052\uffdc\053\uffdc" +
    "\054\uffdc\055\uffdc\056\uffdc\057\uffdc\060\uffdc\061\uffdc\062" +
    "\uffdc\063\uffdc\064\uffdc\065\uffdc\001\002\000\040\033\137" +
    "\041\056\042\064\044\060\045\066\046\055\047\053\050" +
    "\061\051\063\052\062\053\057\054\054\055\065\056\070" +
    "\057\067\001\002\000\062\031\uffda\033\uffda\035\uffda\037" +
    "\uffda\041\uffda\042\uffda\044\uffda\045\uffda\046\uffda\047\uffda" +
    "\050\uffda\051\uffda\052\uffda\053\uffda\054\uffda\055\uffda\056" +
    "\uffda\057\uffda\060\uffda\061\uffda\062\uffda\063\uffda\064\uffda" +
    "\065\uffda\001\002\000\062\031\uffdb\033\uffdb\035\uffdb\037" +
    "\uffdb\041\uffdb\042\uffdb\044\uffdb\045\uffdb\046\uffdb\047\uffdb" +
    "\050\uffdb\051\uffdb\052\uffdb\053\uffdb\054\uffdb\055\uffdb\056" +
    "\uffdb\057\uffdb\060\uffdb\061\uffdb\062\uffdb\063\uffdb\064\uffdb" +
    "\065\uffdb\001\002\000\040\033\141\041\056\042\064\044" +
    "\060\045\066\046\055\047\053\050\061\051\063\052\062" +
    "\053\057\054\054\055\065\056\070\057\067\001\002\000" +
    "\066\030\123\031\uffd8\032\126\033\uffd8\035\uffd8\037\uffd8" +
    "\041\uffd8\042\uffd8\044\uffd8\045\uffd8\046\uffd8\047\uffd8\050" +
    "\uffd8\051\uffd8\052\uffd8\053\uffd8\054\uffd8\055\uffd8\056\uffd8" +
    "\057\uffd8\060\uffd8\061\uffd8\062\uffd8\063\uffd8\064\uffd8\065" +
    "\uffd8\001\002\000\062\031\uffdf\033\uffdf\035\uffdf\037\uffdf" +
    "\041\uffdf\042\uffdf\044\uffdf\045\uffdf\046\uffdf\047\uffdf\050" +
    "\uffdf\051\uffdf\052\uffdf\053\uffdf\054\uffdf\055\uffdf\056\uffdf" +
    "\057\uffdf\060\uffdf\061\uffdf\062\uffdf\063\uffdf\064\uffdf\065" +
    "\uffdf\001\002\000\040\033\144\041\056\042\064\044\060" +
    "\045\066\046\055\047\053\050\061\051\063\052\062\053" +
    "\057\054\054\055\065\056\070\057\067\001\002\000\062" +
    "\031\uffde\033\uffde\035\uffde\037\uffde\041\uffde\042\uffde\044" +
    "\uffde\045\uffde\046\uffde\047\uffde\050\uffde\051\uffde\052\uffde" +
    "\053\uffde\054\uffde\055\uffde\056\uffde\057\uffde\060\uffde\061" +
    "\uffde\062\uffde\063\uffde\064\uffde\065\uffde\001\002\000\042" +
    "\035\uffb4\041\056\042\064\044\060\045\066\046\055\047" +
    "\053\050\061\051\063\052\062\053\057\054\054\055\065" +
    "\056\070\057\067\064\uffb4\001\002\000\004\035\154\001" +
    "\002\000\006\035\uffb3\064\uffb3\001\002\000\006\035\uffb8" +
    "\064\152\001\002\000\006\035\uffb5\064\uffb5\001\002\000" +
    "\026\004\044\005\042\006\051\007\046\010\040\011\043" +
    "\016\147\022\041\040\047\042\050\001\002\000\006\035" +
    "\uffb6\064\uffb6\001\002\000\062\031\uffbb\033\uffbb\035\uffbb" +
    "\037\uffbb\041\uffbb\042\uffbb\044\uffbb\045\uffbb\046\uffbb\047" +
    "\uffbb\050\uffbb\051\uffbb\052\uffbb\053\uffbb\054\uffbb\055\uffbb" +
    "\056\uffbb\057\uffbb\060\uffbb\061\uffbb\062\uffbb\063\uffbb\064" +
    "\uffbb\065\uffbb\001\002\000\006\063\uffa6\065\uffa6\001\002" +
    "\000\036\002\uffff\007\uffff\012\uffff\014\uffff\016\uffff\017" +
    "\uffff\020\uffff\021\uffff\024\uffff\025\uffff\026\uffff\037\uffff" +
    "\063\uffff\065\uffff\001\002\000\006\063\ufff2\065\ufff2\001" +
    "\002\000\030\004\044\005\042\006\051\007\167\010\040" +
    "\011\043\022\041\027\171\034\172\040\047\042\050\001" +
    "\002\000\030\004\044\005\042\006\051\007\046\010\040" +
    "\011\043\022\041\032\115\040\047\042\050\064\113\001" +
    "\002\000\004\060\164\001\002\000\006\063\ufff0\065\ufff0" +
    "\001\002\000\024\004\044\005\042\006\051\007\046\010" +
    "\040\011\043\022\041\040\047\042\050\001\002\000\042" +
    "\041\056\042\064\044\060\045\066\046\055\047\053\050" +
    "\061\051\063\052\062\053\057\054\054\055\065\056\070" +
    "\057\067\063\uffd3\065\uffd3\001\002\000\044\041\056\042" +
    "\064\044\060\045\066\046\055\047\053\050\061\051\063" +
    "\052\062\053\057\054\054\055\065\056\070\057\067\061" +
    "\226\063\uffea\065\uffea\001\002\000\050\032\112\034\217" +
    "\041\uffb9\042\uffb9\044\uffb9\045\uffb9\046\uffb9\047\uffb9\050" +
    "\uffb9\051\uffb9\052\uffb9\053\uffb9\054\uffb9\055\uffb9\056\uffb9" +
    "\057\uffb9\061\uffb9\063\uffb9\065\uffb9\001\002\000\006\063" +
    "\ufff1\065\ufff1\001\002\000\004\034\211\001\002\000\026" +
    "\004\044\005\042\006\051\007\046\010\040\011\043\022" +
    "\041\035\uffe6\040\047\042\050\001\002\000\006\035\uffe4" +
    "\064\uffe4\001\002\000\004\035\204\001\002\000\006\035" +
    "\uffe7\064\202\001\002\000\044\035\uffe1\041\056\042\064" +
    "\044\060\045\066\046\055\047\053\050\061\051\063\052" +
    "\062\053\057\054\054\055\065\056\070\057\067\060\200" +
    "\064\uffe1\001\002\000\006\035\uffe3\064\uffe3\001\002\000" +
    "\024\004\044\005\042\006\051\007\046\010\040\011\043" +
    "\022\041\040\047\042\050\001\002\000\042\035\uffe2\041" +
    "\056\042\064\044\060\045\066\046\055\047\053\050\061" +
    "\051\063\052\062\053\057\054\054\055\065\056\070\057" +
    "\067\064\uffe2\001\002\000\024\004\044\005\042\006\051" +
    "\007\046\010\040\011\043\022\041\040\047\042\050\001" +
    "\002\000\006\035\uffe5\064\uffe5\001\002\000\004\066\205" +
    "\001\002\000\004\036\206\001\002\000\024\007\014\012" +
    "\013\014\005\017\007\020\015\021\006\024\020\025\012" +
    "\026\004\001\002\000\026\007\014\012\013\014\005\017" +
    "\007\020\015\021\006\024\020\025\012\026\004\037\210" +
    "\001\002\000\006\063\uffec\065\uffec\001\002\000\026\004" +
    "\044\005\042\006\051\007\046\010\040\011\043\022\041" +
    "\035\uffe6\040\047\042\050\001\002\000\004\035\213\001" +
    "\002\000\004\036\214\001\002\000\024\007\014\012\013" +
    "\014\005\017\007\020\015\021\006\024\020\025\012\026" +
    "\004\001\002\000\026\007\014\012\013\014\005\017\007" +
    "\020\015\021\006\024\020\025\012\026\004\037\216\001" +
    "\002\000\006\063\uffed\065\uffed\001\002\000\030\004\044" +
    "\005\042\006\051\007\046\010\040\011\043\016\147\022" +
    "\041\035\uffb7\040\047\042\050\001\002\000\042\035\uffe8" +
    "\041\056\042\064\044\060\045\066\046\055\047\053\050" +
    "\061\051\063\052\062\053\057\054\054\055\065\056\070" +
    "\057\067\064\uffe8\001\002\000\006\035\223\064\222\001" +
    "\002\000\024\004\044\005\042\006\051\007\046\010\040" +
    "\011\043\022\041\040\047\042\050\001\002\000\006\063" +
    "\uffee\065\uffee\001\002\000\042\035\uffe9\041\056\042\064" +
    "\044\060\045\066\046\055\047\053\050\061\051\063\052" +
    "\062\053\057\054\054\055\065\056\070\057\067\064\uffe9" +
    "\001\002\000\006\063\uffef\065\uffef\001\002\000\024\004" +
    "\044\005\042\006\051\007\046\010\040\011\043\022\041" +
    "\040\047\042\050\001\002\000\040\041\056\042\064\044" +
    "\060\045\066\046\055\047\053\050\061\051\063\052\062" +
    "\053\057\054\054\055\065\056\070\057\067\062\230\001" +
    "\002\000\024\004\044\005\042\006\051\007\046\010\040" +
    "\011\043\022\041\040\047\042\050\001\002\000\042\041" +
    "\056\042\064\044\060\045\066\046\055\047\053\050\061" +
    "\051\063\052\062\053\057\054\054\055\065\056\070\057" +
    "\067\063\uffeb\065\uffeb\001\002\000\024\004\044\005\042" +
    "\006\051\007\046\010\040\011\043\022\041\040\047\042" +
    "\050\001\002\000\040\035\234\041\056\042\064\044\060" +
    "\045\066\046\055\047\053\050\061\051\063\052\062\053" +
    "\057\054\054\055\065\056\070\057\067\001\002\000\004" +
    "\036\235\001\002\000\024\007\014\012\013\014\005\017" +
    "\007\020\015\021\006\024\020\025\012\026\004\001\002" +
    "\000\026\007\014\012\013\014\005\017\007\020\015\021" +
    "\006\024\020\025\012\026\004\037\237\001\002\000\010" +
    "\013\243\063\uffb2\065\uffb2\001\002\000\006\063\uffaf\065" +
    "\uffaf\001\002\000\010\013\uffad\063\uffad\065\uffad\001\002" +
    "\000\010\013\243\063\uffb1\065\uffb1\001\002\000\006\012" +
    "\245\036\244\001\002\000\024\007\014\012\013\014\005" +
    "\017\007\020\015\021\006\024\020\025\012\026\004\001" +
    "\002\000\004\034\246\001\002\000\024\004\044\005\042" +
    "\006\051\007\046\010\040\011\043\022\041\040\047\042" +
    "\050\001\002\000\040\035\250\041\056\042\064\044\060" +
    "\045\066\046\055\047\053\050\061\051\063\052\062\053" +
    "\057\054\054\055\065\056\070\057\067\001\002\000\004" +
    "\036\251\001\002\000\024\007\014\012\013\014\005\017" +
    "\007\020\015\021\006\024\020\025\012\026\004\001\002" +
    "\000\026\007\014\012\013\014\005\017\007\020\015\021" +
    "\006\024\020\025\012\026\004\037\253\001\002\000\010" +
    "\013\uffac\063\uffac\065\uffac\001\002\000\026\007\014\012" +
    "\013\014\005\017\007\020\015\021\006\024\020\025\012" +
    "\026\004\037\255\001\002\000\006\063\uffab\065\uffab\001" +
    "\002\000\006\063\uffb0\065\uffb0\001\002\000\010\013\uffae" +
    "\063\uffae\065\uffae\001\002\000\024\004\044\005\042\006" +
    "\051\007\046\010\040\011\043\022\041\040\047\042\050" +
    "\001\002\000\040\035\262\041\056\042\064\044\060\045" +
    "\066\046\055\047\053\050\061\051\063\052\062\053\057" +
    "\054\054\055\065\056\070\057\067\001\002\000\004\036" +
    "\263\001\002\000\024\007\014\012\013\014\005\017\007" +
    "\020\015\021\006\024\020\025\012\026\004\001\002\000" +
    "\026\007\014\012\013\014\005\017\007\020\015\021\006" +
    "\024\020\025\012\026\004\037\265\001\002\000\006\063" +
    "\uffa7\065\uffa7\001\002\000\004\007\267\001\002\000\004" +
    "\023\270\001\002\000\024\004\044\005\042\006\051\007" +
    "\046\010\040\011\043\022\041\040\047\042\050\001\002" +
    "\000\040\035\272\041\056\042\064\044\060\045\066\046" +
    "\055\047\053\050\061\051\063\052\062\053\057\054\054" +
    "\055\065\056\070\057\067\001\002\000\004\036\273\001" +
    "\002\000\024\007\014\012\013\014\005\017\007\020\015" +
    "\021\006\024\020\025\012\026\004\001\002\000\026\007" +
    "\014\012\013\014\005\017\007\020\015\021\006\024\020" +
    "\025\012\026\004\037\275\001\002\000\006\063\uffa5\065" +
    "\uffa5\001\002\000\024\004\044\005\042\006\051\007\046" +
    "\010\040\011\043\022\041\040\047\042\050\001\002\000" +
    "\040\035\300\041\056\042\064\044\060\045\066\046\055" +
    "\047\053\050\061\051\063\052\062\053\057\054\054\055" +
    "\065\056\070\057\067\001\002\000\004\015\302\001\002" +
    "\000\004\016\306\001\002\000\024\004\044\005\042\006" +
    "\051\007\046\010\040\011\043\022\041\040\047\042\050" +
    "\001\002\000\040\041\056\042\064\044\060\045\066\046" +
    "\055\047\053\050\061\051\063\052\062\053\057\054\054" +
    "\055\065\056\070\057\067\062\304\001\002\000\024\007" +
    "\014\012\013\014\005\017\007\020\015\021\006\024\020" +
    "\025\012\026\004\001\002\000\026\007\014\012\013\014" +
    "\005\016\uffa9\017\007\020\015\021\006\024\020\025\012" +
    "\026\004\001\002\000\004\062\310\001\002\000\006\063" +
    "\uffaa\065\uffaa\001\002\000\024\007\014\012\013\014\005" +
    "\017\007\020\015\021\006\024\020\025\012\026\004\001" +
    "\002\000\030\007\014\012\013\014\005\017\007\020\015" +
    "\021\006\024\020\025\012\026\004\063\uffa8\065\uffa8\001" +
    "\002\000\042\041\056\042\064\044\060\045\066\046\055" +
    "\047\053\050\061\051\063\052\062\053\057\054\054\055" +
    "\065\056\070\057\067\063\uffa4\065\uffa4\001\002\000\006" +
    "\063\ufff5\065\ufff5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\311\000\024\002\021\003\010\004\024\010\016\014" +
    "\007\015\020\016\022\017\023\022\015\001\001\000\006" +
    "\005\311\045\312\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\004\033" +
    "\010\016\014\007\015\020\016\022\017\023\022\015\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\156" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\044\026\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\003\032\004\024\010\016\014" +
    "\007\015\020\016\022\017\023\022\015\001\001\000\020" +
    "\004\033\010\016\014\007\015\020\016\022\017\023\022" +
    "\015\001\001\000\004\044\155\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\040\110\001" +
    "\001\000\004\005\106\001\001\000\004\005\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\105\001" +
    "\001\000\004\005\104\001\001\000\004\005\103\001\001" +
    "\000\004\005\102\001\001\000\004\005\101\001\001\000" +
    "\004\005\100\001\001\000\004\005\077\001\001\000\004" +
    "\005\076\001\001\000\004\005\075\001\001\000\004\005" +
    "\074\001\001\000\004\005\073\001\001\000\004\005\072" +
    "\001\001\000\004\005\071\001\001\000\004\005\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\005\144" +
    "\041\145\042\147\043\150\001\001\000\002\001\001\000" +
    "\006\005\115\026\113\001\001\000\004\005\142\001\001" +
    "\000\002\001\001\000\004\005\137\001\001\000\004\027" +
    "\120\001\001\000\006\005\134\030\133\001\001\000\010" +
    "\031\123\032\124\033\121\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\131\001\001\000\002\001\001" +
    "\000\004\033\130\001\001\000\004\005\126\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\031\141\032\124\033\121\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\144\043\152\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\165\006\167\001\001" +
    "\000\010\005\115\007\162\026\161\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\164\001\001\000\002" +
    "\001\001\000\004\024\224\001\001\000\004\040\110\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\005\175" +
    "\034\173\035\174\036\172\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\037\176\001\001" +
    "\000\002\001\001\000\004\005\200\001\001\000\002\001" +
    "\001\000\006\005\175\036\202\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\003\206\004" +
    "\024\010\016\014\007\015\020\016\022\017\023\022\015" +
    "\001\001\000\020\004\033\010\016\014\007\015\020\016" +
    "\022\017\023\022\015\001\001\000\002\001\001\000\012" +
    "\005\175\034\211\035\174\036\172\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\003\214\004\024\010\016" +
    "\014\007\015\020\016\022\017\023\022\015\001\001\000" +
    "\020\004\033\010\016\014\007\015\020\016\022\017\023" +
    "\022\015\001\001\000\002\001\001\000\014\005\217\025" +
    "\220\041\145\042\147\043\150\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\223\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\226" +
    "\001\001\000\002\001\001\000\004\005\230\001\001\000" +
    "\002\001\001\000\004\005\232\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\003\235\004\024\010\016\014" +
    "\007\015\020\016\022\017\023\022\015\001\001\000\020" +
    "\004\033\010\016\014\007\015\020\016\022\017\023\022" +
    "\015\001\001\000\010\011\241\012\237\013\240\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\255\013" +
    "\256\001\001\000\002\001\001\000\022\003\253\004\024" +
    "\010\016\014\007\015\020\016\022\017\023\022\015\001" +
    "\001\000\002\001\001\000\004\005\246\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\003\251\004\024\010" +
    "\016\014\007\015\020\016\022\017\023\022\015\001\001" +
    "\000\020\004\033\010\016\014\007\015\020\016\022\017" +
    "\023\022\015\001\001\000\002\001\001\000\020\004\033" +
    "\010\016\014\007\015\020\016\022\017\023\022\015\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\260\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\003\263\004\024\010\016\014\007\015\020" +
    "\016\022\017\023\022\015\001\001\000\020\004\033\010" +
    "\016\014\007\015\020\016\022\017\023\022\015\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\270\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\003\273\004\024\010\016\014\007\015\020\016" +
    "\022\017\023\022\015\001\001\000\020\004\033\010\016" +
    "\014\007\015\020\016\022\017\023\022\015\001\001\000" +
    "\002\001\001\000\004\005\276\001\001\000\002\001\001" +
    "\000\004\020\300\001\001\000\004\021\306\001\001\000" +
    "\004\005\302\001\001\000\002\001\001\000\022\003\304" +
    "\004\024\010\016\014\007\015\020\016\022\017\023\022" +
    "\015\001\001\000\020\004\033\010\016\014\007\015\020" +
    "\016\022\017\023\022\015\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\003\310\004\024\010\016\014\007" +
    "\015\020\016\022\017\023\022\015\001\001\000\020\004" +
    "\033\010\016\014\007\015\020\016\022\017\023\022\015" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Syntax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Syntax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Syntax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public LinkedList<Instruction> ast;

    public void syntax_error (Symbol s) {
        System.err.println("Error sintáctico en la línea " + s.left + " columna " + s.right + ". No se esperaba: " + s.value);
    }

    public void unrecovered_syntax_error (Symbol s) throws Exception {
        System.err.println("Error sintáctico en la línea " + s.left + " columna " + s.right + ". No se esperaba: " + s.value);
    }

    public LinkedList<Instruction> getAST() { return ast; }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Syntax$actions {
  private final Syntax parser;

  /** Constructor */
  CUP$Syntax$actions(Syntax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Syntax$do_action(
    int                        CUP$Syntax$act_num,
    java_cup.runtime.lr_parser CUP$Syntax$parser,
    java.util.Stack            CUP$Syntax$stack,
    int                        CUP$Syntax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Syntax$result;

      /* select the action based on the action number */
      switch (CUP$Syntax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // return ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("return",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // return ::= expresion 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("return",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // sent_for ::= NT_FOR NT_O_PARENTHESES NT_ID NT_IN expresion NT_C_PARENTHESES NT_O_BRACES list_sent NT_C_BRACES 
            {
              SentFor RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("sent_for",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // sent_do ::= NT_DO NT_O_BRACES list_sent NT_C_BRACES NT_WHILE NT_O_BRACES expresion NT_C_BRACES 
            {
              SentDo RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("sent_do",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // sent_while ::= NT_WHILE NT_O_PARENTHESES expresion NT_C_PARENTHESES NT_O_BRACES list_sent NT_C_BRACES 
            {
              SentWhile RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("sent_while",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // case_default ::= NT_DEFAULT NT_COLON list_sent 
            {
              SubSwitch RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("case_default",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // list_case ::= NT_CASE expresion NT_COLON list_sent 
            {
              SubSwitch RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("list_case",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // sent_switch ::= NT_SWITCH NT_O_PARENTHESES expresion NT_C_PARENTHESES list_case case_default 
            {
              SentSwitch RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("sent_switch",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // sent_else ::= NT_ELSE NT_O_BRACES list_sent NT_C_BRACES 
            {
              SubIf RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("sent_else",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // sent_elseif ::= NT_ELSE NT_IF NT_O_PARENTHESES expresion NT_C_PARENTHESES NT_O_BRACES list_sent NT_C_BRACES 
            {
              SubIf RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("sent_elseif",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // list_elseif ::= sent_elseif 
            {
              LinkedList<SubIf> RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("list_elseif",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // list_elseif ::= list_elseif sent_elseif 
            {
              LinkedList<SubIf> RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("list_elseif",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // sent_if ::= NT_IF NT_O_PARENTHESES expresion NT_C_PARENTHESES NT_O_BRACES list_sent NT_C_BRACES sent_else 
            {
              SentIf RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("sent_if",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // sent_if ::= NT_IF NT_O_PARENTHESES expresion NT_C_PARENTHESES NT_O_BRACES list_sent NT_C_BRACES list_elseif sent_else 
            {
              SentIf RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("sent_if",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // sent_if ::= NT_IF NT_O_PARENTHESES expresion NT_C_PARENTHESES NT_O_BRACES list_sent NT_C_BRACES list_elseif 
            {
              SentIf RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("sent_if",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // sent_if ::= NT_IF NT_O_PARENTHESES expresion NT_C_PARENTHESES NT_O_BRACES list_sent NT_C_BRACES 
            {
              SentIf RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("sent_if",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // arg ::= NT_DEFAULT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("arg",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // arg ::= expresion 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("arg",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // list_arg ::= arg 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("list_arg",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // list_arg ::= list_arg NT_COMMA arg 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("list_arg",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // args ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("args",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // args ::= list_arg 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("args",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // invocar ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("invocar",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // invocar ::= NT_O_CROTCHES acceso 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("invocar",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // invocar ::= NT_O_PARENTHESES args NT_C_PARENTHESES 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("invocar",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expresion ::= NT_NULL 
            {
              Operation RESULT =null;
		
                                RESULT = new Operation(Operation.Type.NULL, null);
                            
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expresion ::= NT_FALSE 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
                                RESULT = new Operation(Operation.Type.FALSE, false);
                            
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expresion ::= NT_TRUE 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
                                RESULT = new Operation(Operation.Type.TRUE, true);
                            
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expresion ::= NT_DOUBLE 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
                                RESULT = new Operation(Operation.Type.DECIMAL, a);
                            
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expresion ::= NT_STRING 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
                                RESULT = new Operation(Operation.Type.CADENA, a);
                            
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expresion ::= NT_NUMBER 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
                                RESULT = new Operation(Operation.Type.NUMERO, a);
                            
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expresion ::= NT_ID invocar 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expresion ::= NT_MINUS expresion 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
                                RESULT = new Operation(Operation.Type.NEGATIVO, a);
                            
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expresion ::= NT_NOT expresion 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
                                RESULT = new Operation(Operation.Type.NOT, a);
                            
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expresion ::= expresion NT_AND expresion 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
                                RESULT = new Operation(Operation.Type.AND, a, b);
                            
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expresion ::= expresion NT_OR expresion 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
                                RESULT = new Operation(Operation.Type.OR, a, b);
                            
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expresion ::= expresion NT_NOT_EQUAL expresion 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
                                RESULT = new Operation(Operation.Type.DIFERENTE, a, b);
                            
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expresion ::= expresion NT_EQUAL expresion 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
                                RESULT = new Operation(Operation.Type.IGUAL, a, b);
                            
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expresion ::= expresion NT_GREATERQ expresion 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
                                RESULT = new Operation(Operation.Type.MAYOR_IGUAL, a, b);
                            
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expresion ::= expresion NT_LESSQ expresion 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
                                RESULT = new Operation(Operation.Type.MENOR_IGUAL, a, b);
                            
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expresion ::= expresion NT_GREATER expresion 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
                                RESULT = new Operation(Operation.Type.MAYOR, a, b);
                            
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expresion ::= expresion NT_LESS expresion 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
                                RESULT = new Operation(Operation.Type.MENOR, a, b);
                            
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expresion ::= expresion NT_POT expresion 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
                                RESULT = new Operation(Operation.Type.POTENCIA, a, b);
                            
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expresion ::= expresion NT_MOD expresion 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
                                RESULT = new Operation(Operation.Type.MODULO, a, b);
                            
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expresion ::= expresion NT_DIVIDED expresion 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
                                RESULT = new Operation(Operation.Type.DIVISION, a, b);
                            
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expresion ::= expresion NT_TIMES expresion 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
                                RESULT = new Operation(Operation.Type.MULTIPLICACION, a, b);
                            
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expresion ::= expresion NT_MINUS expresion 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
                                RESULT = new Operation(Operation.Type.RESTA, a, b);
                            
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expresion ::= expresion NT_PLUS expresion 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
                                RESULT = new Operation(Operation.Type.SUMA, a, b);
                            
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // asignacion ::= acceso NT_ASSIGN expresion 
            {
              Assign RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("asignacion",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // vec ::= NT_DBO_CROTCHES expresion NT_DBC_CROTCHES 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("vec",25, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // vec ::= NT_O_CROTCHES expresion NT_C_CROTCHES 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("vec",25, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // list_vec ::= vec 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("list_vec",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // list_vec ::= list_vec vec 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("list_vec",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // vecs ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("vecs",23, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // vecs ::= list_vec 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("vecs",23, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // acceso_coma ::= NT_C_CROTCHES 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("acceso_coma",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // acceso_coma ::= expresion NT_C_CROTCHES 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("acceso_coma",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // acceso_e ::= NT_COMMA acceso_coma 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("acceso_e",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // acceso_e ::= NT_C_CROTCHES vecs 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("acceso_e",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // acceso ::= NT_COMMA expresion NT_C_CROTCHES 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("acceso",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // acceso ::= NT_O_CROTCHES expresion NT_C_CROTCHES vecs 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("acceso",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // acceso ::= expresion acceso_e 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("acceso",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // asignar_param ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("asignar_param",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // asignar_param ::= NT_ASSIGN expresion 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("asignar_param",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // param ::= expresion asignar_param 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("param",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // list_param ::= param 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("list_param",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // list_param ::= list_param NT_COMMA param 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("list_param",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // params ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("params",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // params ::= list_param 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("params",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // list_e ::= expresion 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("list_e",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // list_e ::= list_e NT_COMMA expresion 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("list_e",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // dec_e ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("dec_e",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // dec_e ::= NT_C_QUESTION expresion NT_COLON expresion 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("dec_e",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declaracion ::= NT_O_PARENTHESES params NT_C_PARENTHESES NT_ARROW NT_O_BRACES list_sent NT_C_BRACES 
            {
              Declaration RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declaracion",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declaracion ::= NT_FUNCTION NT_O_PARENTHESES params NT_C_PARENTHESES NT_O_BRACES list_sent NT_C_BRACES 
            {
              Declaration RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declaracion",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declaracion ::= NT_ID NT_O_PARENTHESES list_e NT_C_PARENTHESES 
            {
              Declaration RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declaracion",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declaracion ::= expresion dec_e 
            {
              Declaration RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declaracion",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tipo_declaracion ::= NT_O_CROTCHES asignacion 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipo_declaracion",17, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipo_declaracion ::= NT_ASSIGN declaracion 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipo_declaracion",17, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // variable ::= NT_ID tipo_declaracion 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("variable",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sent ::= NT_CONTINUE 
            {
              Instruction RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sent ::= NT_BREAK 
            {
              Instruction RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sent ::= NT_return return 
            {
              Instruction RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sent ::= sent_for 
            {
              Instruction RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sent ::= sent_do 
            {
              Instruction RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sent ::= sent_while 
            {
              Instruction RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sent ::= sent_switch 
            {
              Instruction RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sent ::= sent_if 
            {
              Instruction RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sent ::= variable 
            {
              Instruction RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // endline ::= NT_JUMPLINE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("endline",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // endline ::= NT_SEMICOLON 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("endline",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // list_sent ::= sent endline 
            {
              LinkedList<Instruction> RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("list_sent",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // list_sent ::= list_sent sent endline 
            {
              LinkedList<Instruction> RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("list_sent",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // begin ::= list_sent 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("begin",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= begin EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = start_val;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Syntax$parser.done_parsing();
          return CUP$Syntax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

